package model;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import Database.DBConnectionPool;
import gestioneAccount.LoginModelDS;
import gestioneAccount.Utente;
import gestioneAcquisti.OrdineModel;
import gestioneAcquisti.ordine;
public class TestOrdine {
	private Connection db;
	private OrdineModel ordineDAO;
	private LoginModelDS UserDAO;
	
	private ordine ordineEsistente;
	private ordine ordineNonEsistente;
	private Utente utenteEsistente;
	private Utente utenteEsistente2;
	private boolean test=true;
	
	public TestOrdine() {}
	
	@Before
	public void setUp() throws SQLException {
		try {
			db=DBConnectionPool.getConnection();
			
		}catch (SQLException e) {
			e.printStackTrace();
		}
		
		ordineDAO=new OrdineModel(db);
		  UserDAO = new LoginModelDS(db);
		ordineEsistente=new ordine();
		utenteEsistente=new Utente();
		utenteEsistente2=new Utente();
		
		
	    utenteEsistente.setNome("Giuseppe");
        utenteEsistente.setCognome("Ross");
        utenteEsistente.setIndirizzo("Via Roma");
        utenteEsistente.setCivico("4");
        utenteEsistente.setCap("84084");
        utenteEsistente.setCodice_fiscale("RSSGPP58T04B415A");
        utenteEsistente.setEmail("russo45@gmail.com");
        utenteEsistente.setPwd("fuckyou1");
        UserDAO.doSave(utenteEsistente);
        
        
        

	    utenteEsistente2.setNome("Giuseppe");
        utenteEsistente2.setCognome("Ross");
        utenteEsistente2.setIndirizzo("Via Roma");
        utenteEsistente2.setCivico("4");
        utenteEsistente2.setCap("84084");
        utenteEsistente2.setCodice_fiscale("RSSGPP58T04B416D");
        utenteEsistente2.setEmail("russo45@gmail.com");
        utenteEsistente2.setPwd("fuckyou1");
        UserDAO.doSave(utenteEsistente2);
        
		ordineNonEsistente=new ordine();
		
		ordineEsistente.setautoGeneratedID(99);
		ordineEsistente.setCodice_fiscale(utenteEsistente.getCodice_fiscale());
		
	//	ordineNonEsistente.set
	//	ordineNonEsistente.setCodice_fiscale(utenteEsistente2.getCodice_fiscale());
		
		
		
		
		//ordineDAO.doSave(ordineEsistente);
	}
	
	@Test
	public void TestGetOrdineExisting() throws SQLException {
		assertNotNull(ordineDAO.doRetrieveByCodice_fiscale(ordineEsistente.getCodice_fiscale()));
	}
	
	@Test
	public void TestOrdineNotExisting() throws SQLException {
		
	assertEquals(true,ordineDAO.doRetrieveByCodice_fiscale(ordineNonEsistente.getCodice_fiscale()).size()==0);


	
	}
	
	   @Test
	    public void TestdeleteOrdineExist() throws Exception {
	    	assertEquals(true,ordineDAO.doDelete(ordineEsistente.getautoGeneratedID()));
	    //	assertTrue(daoO.doSave(ord1));
	    //	assertTrue(daoO.doSave(ord2));
	    }

}
